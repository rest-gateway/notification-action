---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Release

on:
  push:
    branches:
      - master

jobs:
  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.planned_version.outputs.planned_version }}
      tag_hash: ${{ steps.lookup_tag.outputs.tag_hash }}
      can_create: ${{ steps.can_create.outputs.can_create }}
      tag_exists: ${{ steps.can_create.outputs.tag_exists }}
      branch_name: ${{ steps.get_branch_name.outputs.branch_name }}
      job_status: ${{ job.status }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@master
        with:
          version_filename: ".version"
          github_token: "${{secrets.GITHUB_TOKEN}}"
          fail_on_error: true


  release:
    name: Put a tag on it
    runs-on: ubuntu-latest

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "notification-action"

    outputs:
      job_status: ${{ job.status }}

    needs:
      - validate_new_version

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Validate envionment variables
        id: validate_envvars
        shell: bash
        run: |
          [[ ! -z "PLANNED_VERSION" ]] || exit 2
          [[ ! -z "TAG_HASH" ]] || exit 2
          [[ ! -z "CAN_CREATE_RELEASE" ]] || exit 2
          [[ ! -z "TAG_EXISTS" ]] || exit 2
          [[ ! -z "BRANCH_NAME" ]] || exit 2


      - name: Generate changelog
        id: generate_changelog
        shell: bash
        run: |
          described=$(git describe --tags || git rev-list --max-parents=0 HEAD)
          described_parts=( ${described//-/ } )
          current_tag=${described_parts[0]}

          pull_command_example="pull ghcr.io/${{ steps.set_docker_image_id.outputs.github_image_full_name }}"

          changelog_filename=".changelog"
          release_changelog_filename=".release_changelog"
          echo "current_tag=${current_tag}"

          echo "Listing current changes..."
          git log --pretty=oneline --format='%w(1000)* %cd %an <%ae>%n%w(60,0,2)- %s%n' --date="format:%a %b %d %Y" "$current_tag"..HEAD | tee "${changelog_filename}"
          git log --pretty=oneline --format='%w(200,0,2)- %s (%an <%ae>)' --date="format:%a %b %d %Y" "$current_tag"..HEAD | sort | tee "${release_changelog_filename}"

          echo "Changelog file..."
          cat .changelog

          echo "Preparing a GitHub Release Changelog"
          cat << EOF > "${release_changelog_filename}"
          Docker image
          ============

          \`podman ${pull_command_example}\`

          \`docker ${pull_command_example}\`

          Changelog
          =========

          $(cat "${release_changelog_filename}")
          EOF

          echo "::set-output name=changelog_filename::${changelog_filename}"
          echo "::set-output name=release_changelog_filename::${release_changelog_filename}"


      - name: Display changelog
        run: echo "${{ steps.generate_changelog.outputs.changelog }}"


      - name: Create a new tag
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "${env.PLANNED_VERSION}",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "${{steps.timestamp.outputs.timestamp}}"
            }'


      - name: Update the 'latest' tag
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "latest",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "${{steps.timestamp.outputs.timestamp}}"
            }'


      - name: Create a Release
        id: create_release
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.PLANNED_VERSION}}
          release_name: v${{env.PLANNED_VERSION}}
          body_path: ${{steps.generate_changelog.outputs.release_changelog_filename}}
          draft: false
          prerelease: false


      - name: Use latest released action
        uses: rest-gateway/notification-action@master
        with:
          message: "Release ${{env.PLANNED_VERSION}} happened for <b>${{env.APP_NAME}}</b>. Yay."
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"
...
